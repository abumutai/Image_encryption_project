/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package classes.frames.user;
import classes.frames.admin.*;
import static classes.frames.user.Test2.getConnection;
import classes.frames.user.myConnection;
import java.awt.Image;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author MUTAI
 */
public class Received extends javax.swing.JPanel {

    /**
     * Creates new form Panel1
     */
    public Received() {
        initComponents();
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        key = new javax.swing.JTextField();
        btnHome1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        input = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        dec_label = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        lbl_image = new javax.swing.JLabel();
        user = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 3, true), "Received Images", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(0, 0, 255))); // NOI18N
        setMinimumSize(new java.awt.Dimension(607, 307));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Image ID:");
        jLabel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 255), 2, true));

        key.setBackground(new java.awt.Color(0, 0, 255));
        key.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        key.setForeground(new java.awt.Color(255, 255, 255));
        key.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyActionPerformed(evt);
            }
        });

        btnHome1.setBackground(new java.awt.Color(0, 0, 255));
        btnHome1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnHome1.setForeground(new java.awt.Color(255, 255, 255));
        btnHome1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/classes/images/search1.png"))); // NOI18N
        btnHome1.setText("Search");
        btnHome1.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        btnHome1.setIconTextGap(1);
        btnHome1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHome1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 51, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText(" Key:");
        jLabel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 255), 2, true));

        input.setBackground(new java.awt.Color(0, 0, 255));
        input.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        input.setForeground(new java.awt.Color(255, 255, 255));
        input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputActionPerformed(evt);
            }
        });

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 255), 5, true), "Decrypted Image", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 12), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel5.setMaximumSize(new java.awt.Dimension(100, 100));

        dec_label.setMaximumSize(new java.awt.Dimension(100, 100));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dec_label, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dec_label, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Image ID", "encrypted date"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton2.setBackground(new java.awt.Color(0, 0, 255));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/classes/images/decrypt2.jpg"))); // NOI18N
        jButton2.setText("Decrypt");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(0, 0, 255));
        jButton4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/classes/images/send2.png"))); // NOI18N
        jButton4.setText("Send");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(0, 0, 255));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/classes/images/delete1.png"))); // NOI18N
        jButton3.setText("Delete");
        jButton3.setIconTextGap(0);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 255), 5, true), "Selected Image", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 12), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel7.setMaximumSize(new java.awt.Dimension(100, 100));

        lbl_image.setMaximumSize(new java.awt.Dimension(100, 100));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbl_image, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_image, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                .addContainerGap())
        );

        user.setFont(new java.awt.Font("Tahoma", 0, 5)); // NOI18N
        user.setForeground(new java.awt.Color(240, 240, 240));
        user.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnHome1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(user, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(key, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(509, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(user, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(key, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnHome1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton4)))
                        .addGap(35, 35, 35)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 190, Short.MAX_VALUE)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(71, 71, 71)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(228, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void keyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_keyActionPerformed

    private void btnHome1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHome1ActionPerformed
String imgid= input.getText();
if(imgid.isEmpty()){
    JOptionPane.showMessageDialog(null, "Please enter the image ID","WARNING",JOptionPane.WARNING_MESSAGE);
}
else{
    PreparedStatement ps;
    ResultSet rs;
    String query="SELECT * FROM sent WHERE img_id=?";
    try {
        ps=myConnection.getConnection().prepareStatement(query);
        ps.setString(1, imgid);
        rs=ps.executeQuery();
        if(rs.next()){
            String keys=rs.getString("dec_key");
            key.setText(keys);
            byte[] img=rs.getBytes("img_data");
             ImageIcon image=new ImageIcon(img);
                        Image im= image.getImage();
                        Image myImg= im.getScaledInstance(lbl_image.getWidth(),lbl_image.getHeight(), Image.SCALE_SMOOTH);
                        ImageIcon newImage= new ImageIcon(myImg);
                        lbl_image.setIcon(newImage);
                        
        }
        else{
            JOptionPane.showMessageDialog(null, "Could not find image","ERROR",JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException ex) {
        Logger.getLogger(Received.class.getName()).log(Level.SEVERE, null, ex);
    }
    
}
    }//GEN-LAST:event_btnHome1ActionPerformed

    private void inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    String keys=key.getText();
        try {
            newFiles(keys);
        } catch (IOException ex) {
            Logger.getLogger(Received.class.getName()).log(Level.SEVERE, null, ex);
        }
        String id=input.getText();
        PreparedStatement ps;
        ResultSet rs;
        String query="SELECT * FROM decrypted WHERE img_id=?";
        
        try {
            ps=myConnection.getConnection().prepareStatement(query);
            ps.setString(1, id);
            rs=ps.executeQuery();
      
                
           
        } catch (SQLException ex) {
            Logger.getLogger(Encrypted.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        String id= input.getText();
        if(id.isEmpty()){
              JOptionPane.showMessageDialog(null,"Please select an image","ERROR",JOptionPane.WARNING_MESSAGE);
        }
        else{
            String receiver= JOptionPane.showInputDialog(null, "Enter the username of the receiver");
            ResultSet rs;
                java.sql.Timestamp date = new java.sql.Timestamp(new java.util.Date().getTime());
                PreparedStatement ps;
            String query="SELECT * FROM users WHERE username=?";
           
            try {
                 ps=myConnection.getConnection().prepareStatement(query);
                 ps.setString(1,receiver);
                 rs=ps.executeQuery();
                 if(!rs.next()){
                    JOptionPane.showMessageDialog(null,"User does not exist","ERROR",JOptionPane.ERROR_MESSAGE);
                } 
                else{
                    try {
                        String keys= key.getText();
                         String sender=user.getText();
                         Blob img= null;
                         query= "SELECT * FROM sent WHERE img_id=?";
                         ps=myConnection.getConnection().prepareStatement(query);
                         ps.setString(1, id);
                         rs=ps.executeQuery();
                        if(rs.next()){
                            img= rs.getBlob("img_data");  
                        }
                        else{
                            JOptionPane.showMessageDialog(null, "Could not retrive image");
                        }
                        query ="INSERT INTO sent(sender,receiver, img_data, sent_date, dec_key)values(?,?,?,?,?)";
                        ps=myConnection.getConnection().prepareStatement(query);
                        ps.setString(1,sender);
                        ps.setString(2, receiver);
                        ps.setBlob(3,img);
                        ps.setTimestamp(4,date);
                        ps.setString(5, keys);
                        int exe=ps.executeUpdate();
                        if(exe==1){
                             JOptionPane.showMessageDialog(null,"Image sent successfully","SUCCESS",JOptionPane.INFORMATION_MESSAGE);
                         UserHome uh= new UserHome();
                         String username= sender;
                            uh.Home(username);
                        }
                        else{
                            JOptionPane.showMessageDialog(null,"Could not sent image","ERROR",JOptionPane.ERROR_MESSAGE);
                        }
                    }
                    catch (SQLException ex) {
                         Logger.getLogger(Encrypted.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } 
            }
            catch (SQLException ex) {
                Logger.getLogger(Encrypted.class.getName()).log(Level.SEVERE, null, ex);
            } 
        } 
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String image_id= input.getText();
        int confirm= JOptionPane.showConfirmDialog(null,"Do you want to delete the image?","CONFIRM",JOptionPane.YES_NO_OPTION);
      if(confirm==JOptionPane.YES_OPTION){
          try {
           
              PreparedStatement ps;
              ResultSet rs;
              String query= "DELETE FROM sent WHERE img_id=?";
              ps=myConnection.getConnection().prepareStatement(query);
              ps.setString(1, image_id);
              int exe=ps.executeUpdate();
              if(exe>0){
                  JOptionPane.showMessageDialog(null, "Image deleted","SUCCESS",JOptionPane.INFORMATION_MESSAGE);
                    String username= user.getText();
                  Table(username);
                   UserHome uh= new UserHome();
                  uh.Home(username);
              }
              else{
                   JOptionPane.showMessageDialog(null, "Could not delete image","ERROR",JOptionPane.ERROR_MESSAGE);
              }
          } catch (SQLException ex) {
              Logger.getLogger(Encrypted.class.getName()).log(Level.SEVERE, null, ex);
          }
      }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
         try{
            int row=jTable1.getSelectedRow();
            String table_click=(jTable1.getModel().getValueAt(row, 0).toString());
            PreparedStatement ps;
            ResultSet rs;
            String query= "SELECT * FROM sent WHERE img_id=?";
            ps=myConnection.getConnection().prepareStatement(query);
            ps.setString(1,table_click);
            rs=ps.executeQuery();
            if(rs.next()){
                byte[] img= rs.getBytes("img_data");
                        ImageIcon image=new ImageIcon(img);
                        Image im= image.getImage();
                        Image myImg= im.getScaledInstance(dec_label.getWidth(),dec_label.getHeight(), Image.SCALE_SMOOTH);
                        ImageIcon newImage= new ImageIcon(myImg);
                        lbl_image.setIcon(newImage);
                        String keys= rs.getString("dec_key");
                        key.setText(keys);
                        String id=rs.getString("img_id");
                        input.setText(id);
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_jTable1MouseClicked

public void Table(String username){
    PreparedStatement ps = null;
        ResultSet rs = null;
    try{
        
        String fail="fail";
        String sql= "select img_id,sender,sent_date from sent where receiver=?";
        ps=myConnection.getConnection().prepareStatement(sql);
            ps.setString(1, username);
        rs= ps.executeQuery();
        jTable1.setModel(DbUtils.resultSetToTableModel(rs));
        
    }
    catch(Exception e){
        JOptionPane.showMessageDialog(null,e);
    }
    finally{
        try{
           rs.close();
           ps.close();
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }
    }
}
public void newFiles(String keys) throws FileNotFoundException, IOException{
       String rename= JOptionPane.showInputDialog(null,"Enter the name of the new file");
    PreparedStatement ps = null;
     ResultSet rs;
     keys=key.getText();
     String query="SELECT * FROM filemanager WHERE messages=?";
         try {
             ps=getConnection().prepareStatement(query);
             ps.setString(1,keys);
             rs=ps.executeQuery();
             if(rs.next()){
                 
             
                  query= "SELECT * FROM fileManager WHERE messages=?";
                try {
                    ps=getConnection().prepareStatement(query);
                    ps.setString(1, keys);
                    rs=ps.executeQuery();
                    if(rs.next()){
                       String file="C:\\Users\\Kib\\Desktop\\"+rename+".png";
                       FileOutputStream fos=new FileOutputStream(file);
                      
                        byte[] img = rs.getBytes("files");
                        
                          ImageIcon image=new ImageIcon(img);
                        Image im= image.getImage();
                        Image myImg= im.getScaledInstance(dec_label.getWidth(),dec_label.getHeight(), Image.SCALE_SMOOTH);
                         fos.write(img);
                        ImageIcon newImage= new ImageIcon(myImg);
                        dec_label.setIcon(newImage);
                        String username=user.getText();
                        InputStream files= new FileInputStream(new File(file));
                        java.sql.Timestamp date = new java.sql.Timestamp(new java.util.Date().getTime());
                        query= "INSERT INTO decrypted(username,img_data,dec_date)values(?,?,?)";
                    ps=myConnection.getConnection().prepareStatement(query);
                       ps.setString(1, username);
                       ps.setBlob(2,files);
                       ps.setTimestamp(3,date);
                       ps.executeUpdate();
                        UserHome uh= new UserHome();
                            uh.Home(username);
                    }
                    else{
                       JOptionPane.showMessageDialog(null,"Could find image","ERROR",JOptionPane.ERROR_MESSAGE);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(Encrypted.class.getName()).log(Level.SEVERE, null, ex);
                }
             }
         } catch (SQLException ex) {
             Logger.getLogger(Test2.class.getName()).log(Level.SEVERE, null, ex);
         }
                                          
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnHome1;
    private javax.swing.JLabel dec_label;
    private javax.swing.JTextField input;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField key;
    private javax.swing.JLabel lbl_image;
    private javax.swing.JLabel user;
    // End of variables declaration//GEN-END:variables
}
